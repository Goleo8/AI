{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/Users/Goleo8/anaconda3/lib/python3.6/importlib/_bootstrap.py:219: RuntimeWarning: numpy.dtype size changed, may indicate binary incompatibility. Expected 96, got 88\n",
      "  return f(*args, **kwds)\n"
     ]
    }
   ],
   "source": [
    "import numpy as np\n",
    "import pandas as pd\n",
    "from sklearn.linear_model import LinearRegression\n",
    "from sklearn.linear_model import LogisticRegression\n",
    "from sklearn import datasets\n",
    "import matplotlib.pyplot as plt\n",
    "%matplotlib inline"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 1. Linear Regression"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "X=np.linspace(0,20,30)\n",
    "y=X*2+np.random.randn(X.shape[0])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[[2.00366856]]\n",
      "[-0.14318764]\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/Users/Goleo8/anaconda3/lib/python3.6/site-packages/sklearn/linear_model/base.py:509: RuntimeWarning: internal gelsd driver lwork query error, required iwork dimension not returned. This is likely the result of LAPACK bug 0038, fixed in LAPACK 3.2.2 (released July 21, 2010). Falling back to 'gelss' driver.\n",
      "  linalg.lstsq(X, y)\n"
     ]
    }
   ],
   "source": [
    "lr=LinearRegression()\n",
    "lr.fit(X.reshape(X.shape[0],1),y.reshape(y.shape[0],1))\n",
    "print(lr.coef_)\n",
    "print(lr.intercept_)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "y_pred=lr.predict(X.reshape(X.shape[0],1))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x1136f0400>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.scatter(X,y,color='red')\n",
    "plt.plot(X,y_pred,'g--')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "X1=np.random.randn(100,5)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "a=np.array([3,4,5,2,1])\n",
    "a=a.reshape(a.shape[0],-1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "y=np.dot(X1,a)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[[3. 4. 5. 2. 1.]]\n",
      "[2.77555756e-16]\n"
     ]
    }
   ],
   "source": [
    "lr.fit(X1,y)\n",
    "print(lr.coef_)\n",
    "print(lr.intercept_)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### 1.1 Linear Regression Resolved by Normal Equation"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[[3.]\n",
      " [4.]\n",
      " [5.]\n",
      " [2.]\n",
      " [1.]]\n"
     ]
    }
   ],
   "source": [
    "w1=np.dot(np.dot(np.linalg.inv(np.dot(X1.T,X1)),X1.T),y)\n",
    "print(w1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[0.],\n",
       "       [0.],\n",
       "       [0.],\n",
       "       [0.],\n",
       "       [0.]])"
      ]
     },
     "execution_count": 36,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "w2=np.zeros((5,1))\n",
    "w2"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### 1.2 Gradient Descent"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[[3. 4. 5. 2. 1.]]\n",
      "[[3. 4. 5. 2. 1.]]\n",
      "[[3. 4. 5. 2. 1.]]\n",
      "[[3. 4. 5. 2. 1.]]\n",
      "[[3. 4. 5. 2. 1.]]\n",
      "[[3. 4. 5. 2. 1.]]\n",
      "[[3. 4. 5. 2. 1.]]\n",
      "[[3. 4. 5. 2. 1.]]\n",
      "[[3. 4. 5. 2. 1.]]\n",
      "[[3. 4. 5. 2. 1.]]\n"
     ]
    }
   ],
   "source": [
    "lrate=.01\n",
    "for i in range(1000):\n",
    "    w2=w2-lrate*np.dot(X1.T,(np.dot(X1,w2)-y))\n",
    "    if (i+1)%100==0:\n",
    "        print(w2.reshape(1,5))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### 1.3 Stochastic Gradient Descent"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 48,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[[3. 4. 5. 2. 1.]]\n",
      "[[3. 4. 5. 2. 1.]]\n",
      "[[3. 4. 5. 2. 1.]]\n",
      "[[3. 4. 5. 2. 1.]]\n",
      "[[3. 4. 5. 2. 1.]]\n",
      "[[3. 4. 5. 2. 1.]]\n",
      "[[3. 4. 5. 2. 1.]]\n",
      "[[3. 4. 5. 2. 1.]]\n",
      "[[3. 4. 5. 2. 1.]]\n",
      "[[3. 4. 5. 2. 1.]]\n"
     ]
    }
   ],
   "source": [
    "w3=np.zeros((5,1))\n",
    "lrate=.01\n",
    "for index in range(1000):\n",
    "    for i in range(X1.shape[0]):\n",
    "        x_i=X1[i,:].reshape(1,-1)\n",
    "        y_i=y[i]\n",
    "        w2=w2-lrate*np.dot(x_i.T,(np.dot(x_i,w2)-y_i))\n",
    "    if (index+1)%100==0:\n",
    "        print(w2.reshape(1,5))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 2. Classification\n",
    "#### 2.1 Logistic Regression  "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.externals.joblib import Memory\n",
    "from sklearn.datasets import load_svmlight_file\n",
    "mem=Memory(\"./memcache\")\n",
    "\n",
    "@mem.cache\n",
    "\n",
    "def get_data(file):\n",
    "    data = load_svmlight_file(file)\n",
    "    return data[0],data[1]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "________________________________________________________________________________\n",
      "[Memory] Calling __main__--Users-Goleo8-Dev-Workspace-Repository-AI-Machine Learning-__ipython-input__.get_data...\n",
      "get_data('../data/part.txt')\n",
      "_________________________________________________________get_data - 0.0s, 0.0min\n"
     ]
    }
   ],
   "source": [
    "X,y=get_data('../data/part.txt')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.model_selection import train_test_split\n",
    "\n",
    "X_train,X_test,y_train,y_test=train_test_split(X,y,test_size=0.33,random_state=1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,\n",
       "          intercept_scaling=1, max_iter=150, multi_class='ovr', n_jobs=1,\n",
       "          penalty='l1', random_state=None, solver='liblinear', tol=0.0001,\n",
       "          verbose=0, warm_start=False)"
      ]
     },
     "execution_count": 34,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "logistic_r=LogisticRegression(penalty='l1',max_iter=150)\n",
    "logistic_r.fit(X_train,y_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "metadata": {},
   "outputs": [],
   "source": [
    "y_pred=logistic_r.predict(X_test)\n",
    "\n",
    "from sklearn.metrics import confusion_matrix\n",
    "from sklearn.metrics import f1_score, precision_score, recall_score"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[[102  26]\n",
      " [ 41  55]]\n",
      "0.7132867132867133\n",
      "0.796875\n",
      "0.7527675276752768\n"
     ]
    }
   ],
   "source": [
    "print(confusion_matrix(y_test,y_pred))\n",
    "print(precision_score(y_test,y_pred))\n",
    "print(recall_score(y_test,y_pred))\n",
    "print(f1_score(y_test,y_pred))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/Users/Goleo8/anaconda3/lib/python3.6/site-packages/sklearn/discriminant_analysis.py:388: UserWarning: Variables are collinear.\n",
      "  warnings.warn(\"Variables are collinear.\")\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "LinearDiscriminantAnalysis(n_components=None, priors=None, shrinkage=None,\n",
       "              solver='svd', store_covariance=False, tol=0.0001)"
      ]
     },
     "execution_count": 39,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from sklearn.discriminant_analysis import LinearDiscriminantAnalysis\n",
    "\n",
    "lda=LinearDiscriminantAnalysis()\n",
    "lda.fit(X_train.toarray(),y_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "metadata": {},
   "outputs": [],
   "source": [
    "y_pred=lda.predict(X_test.toarray())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[[81 47]\n",
      " [47 49]]\n",
      "0.6328125\n",
      "0.6328125\n",
      "0.6328125\n"
     ]
    }
   ],
   "source": [
    "print(confusion_matrix(y_test,y_pred))\n",
    "print(precision_score(y_test,y_pred))\n",
    "print(recall_score(y_test,y_pred))\n",
    "print(f1_score(y_test,y_pred))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Softmax"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn import datasets\n",
    "from sklearn.linear_model import LogisticRegression\n",
    "\n",
    "logR = LogisticRegression(penalty='l1',multi_class='multinomial',solver='saga')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [],
   "source": [
    "iris=datasets.load_iris()\n",
    "X=iris.data\n",
    "y=iris.target"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.model_selection import train_test_split\n",
    "X_train,X_test,y_train,y_test=train_test_split(X,y,test_size=.33,random_state=42)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/Users/Goleo8/anaconda3/lib/python3.6/site-packages/sklearn/linear_model/sag.py:326: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  \"the coef_ did not converge\", ConvergenceWarning)\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,\n",
       "          intercept_scaling=1, max_iter=100, multi_class='multinomial',\n",
       "          n_jobs=1, penalty='l1', random_state=None, solver='saga',\n",
       "          tol=0.0001, verbose=0, warm_start=False)"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "logR.fit(X_train,y_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [],
   "source": [
    "y_pred=logR.predict(X_test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[[19  0  0]\n",
      " [ 0 15  0]\n",
      " [ 0  0 16]]\n"
     ]
    }
   ],
   "source": [
    "from sklearn.metrics import confusion_matrix\n",
    "print(confusion_matrix(y_test,y_pred))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[[ 0.25992705  2.01294316 -2.62227897 -0.15219682]\n",
      " [ 0.          0.          0.         -0.1964916 ]\n",
      " [-1.79616488 -1.86215153  2.89739178  2.74429442]]\n"
     ]
    }
   ],
   "source": [
    "print(logR.coef_)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[3.54144636e-03, 8.30603039e-01, 1.65855515e-01],\n",
       "       [9.86323784e-01, 1.36762054e-02, 1.03559861e-08],\n",
       "       [5.78529262e-08, 4.08370668e-03, 9.95916235e-01],\n",
       "       [6.81079729e-03, 7.82958833e-01, 2.10230370e-01],\n",
       "       [3.48044886e-03, 8.76729093e-01, 1.19790459e-01],\n",
       "       [9.80622121e-01, 1.93778392e-02, 3.98191383e-08],\n",
       "       [7.44924348e-02, 9.05101602e-01, 2.04059629e-02],\n",
       "       [1.10338094e-03, 3.12423163e-01, 6.86473456e-01],\n",
       "       [1.32295663e-03, 5.90822031e-01, 4.07855012e-01],\n",
       "       [2.46296191e-02, 9.37311594e-01, 3.80587868e-02],\n",
       "       [1.50506757e-03, 3.91812043e-01, 6.06682890e-01],\n",
       "       [9.61278126e-01, 3.87217219e-02, 1.52505832e-07],\n",
       "       [9.90686568e-01, 9.31342832e-03, 4.12971177e-09],\n",
       "       [9.59956381e-01, 4.00434725e-02, 1.46156114e-07],\n",
       "       [9.90499129e-01, 9.50085917e-03, 1.18403126e-08],\n",
       "       [1.05043864e-02, 8.39859644e-01, 1.49635970e-01],\n",
       "       [1.30168240e-05, 3.14927323e-02, 9.68494251e-01],\n",
       "       [1.53818563e-02, 9.26355619e-01, 5.82625251e-02],\n",
       "       [4.96123098e-03, 7.60789118e-01, 2.34249651e-01],\n",
       "       [1.47121181e-05, 3.23402047e-02, 9.67645083e-01],\n",
       "       [9.55571349e-01, 4.44283053e-02, 3.45648382e-07],\n",
       "       [1.58996342e-03, 4.10189018e-01, 5.88221019e-01],\n",
       "       [9.72289784e-01, 2.77100601e-02, 1.56056514e-07],\n",
       "       [1.94397445e-05, 4.29221841e-02, 9.57058376e-01],\n",
       "       [2.20655700e-04, 3.60716247e-01, 6.39063097e-01],\n",
       "       [3.47618630e-04, 1.64817342e-01, 8.34835039e-01],\n",
       "       [8.78198250e-06, 5.61721111e-02, 9.43819107e-01],\n",
       "       [2.22944056e-05, 4.31672271e-02, 9.56810479e-01],\n",
       "       [9.61606417e-01, 3.83933103e-02, 2.72283158e-07],\n",
       "       [9.47505444e-01, 5.24941448e-02, 4.11103723e-07],\n",
       "       [9.95596682e-01, 4.40331486e-03, 3.42199490e-09],\n",
       "       [9.97564047e-01, 2.43595285e-03, 4.53642675e-10],\n",
       "       [1.92432686e-02, 9.52791652e-01, 2.79650793e-02],\n",
       "       [9.70602561e-01, 2.93973072e-02, 1.31683528e-07],\n",
       "       [9.77623923e-01, 2.23759523e-02, 1.25106328e-07],\n",
       "       [2.07572092e-04, 1.79992482e-01, 8.19799946e-01],\n",
       "       [1.61601008e-02, 9.15309677e-01, 6.85302224e-02],\n",
       "       [9.83118406e-01, 1.68815707e-02, 2.29037513e-08],\n",
       "       [9.88749658e-01, 1.12503286e-02, 1.35821191e-08],\n",
       "       [9.94871718e-01, 5.12828015e-03, 1.69635020e-09],\n",
       "       [1.03168521e-04, 8.85354420e-02, 9.11361390e-01],\n",
       "       [2.05032040e-02, 8.57697122e-01, 1.21799674e-01],\n",
       "       [8.37352807e-03, 9.06475918e-01, 8.51505537e-02],\n",
       "       [9.95743252e-01, 4.25674587e-03, 1.93125184e-09],\n",
       "       [9.89218467e-01, 1.07815262e-02, 7.03747203e-09],\n",
       "       [2.09902171e-02, 9.43302227e-01, 3.57075555e-02],\n",
       "       [7.68353010e-04, 4.81905728e-01, 5.17325919e-01],\n",
       "       [2.14604108e-04, 2.01954355e-01, 7.97831041e-01],\n",
       "       [1.52026461e-02, 9.44817191e-01, 3.99801631e-02],\n",
       "       [4.37640871e-05, 5.71687889e-02, 9.42787447e-01]])"
      ]
     },
     "execution_count": 16,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "logR.predict_proba(X_test)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# ToDos\n",
    "\n",
    "#### Classification\n",
    "\n",
    "* Parametric learning algorithm\n",
    "* Non-parametric learning algorithm\n",
    "\n",
    "#### Locally Weighted Regression\n",
    "\n",
    "\n",
    "fit $\\theta$ to minimize\n",
    "$\\sum_i{w^{(i)}}(y^{(i)}-\\theta^{T} *x^{(i)})^2$\n",
    "\n",
    "\\begin{equation}\n",
    "w^{(i)}=\\exp(-\\frac{(x^{(i)}-x)^2}{2*\\tau^2})\n",
    "\\end{equation}\n",
    "\n",
    " \n",
    "### Perception Algorithm   \n",
    "### Newton Method"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.4"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
