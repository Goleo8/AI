{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
<<<<<<< HEAD
   "metadata": {
    "collapsed": true
   },
=======
   "metadata": {},
>>>>>>> 6923c13576695537d8da33ed63b8113591fa25ef
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "import pandas as pd\n",
    "from sklearn.linear_model import LinearRegression\n",
    "import matplotlib.pyplot as plt\n",
    "%matplotlib inline"
   ]
  },
  {
   "cell_type": "code",
<<<<<<< HEAD
   "execution_count": 6,
   "metadata": {
    "collapsed": true
   },
=======
   "execution_count": 9,
   "metadata": {},
>>>>>>> 6923c13576695537d8da33ed63b8113591fa25ef
   "outputs": [],
   "source": [
    "X=np.linspace(0,20,30)\n",
    "y=X*2+np.random.randn(X.shape[0])"
   ]
  },
  {
   "cell_type": "code",
<<<<<<< HEAD
   "execution_count": 7,
   "metadata": {
    "collapsed": false
   },
=======
   "execution_count": 3,
   "metadata": {},
>>>>>>> 6923c13576695537d8da33ed63b8113591fa25ef
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
<<<<<<< HEAD
      "[[2.01920603]]\n",
      "[-0.00863236]\n"
=======
      "[[2.00366856]]\n",
      "[-0.14318764]\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/Users/Goleo8/anaconda3/lib/python3.6/site-packages/sklearn/linear_model/base.py:509: RuntimeWarning: internal gelsd driver lwork query error, required iwork dimension not returned. This is likely the result of LAPACK bug 0038, fixed in LAPACK 3.2.2 (released July 21, 2010). Falling back to 'gelss' driver.\n",
      "  linalg.lstsq(X, y)\n"
>>>>>>> 6923c13576695537d8da33ed63b8113591fa25ef
     ]
    }
   ],
   "source": [
    "lr=LinearRegression()\n",
    "lr.fit(X.reshape(X.shape[0],1),y.reshape(y.shape[0],1))\n",
    "print(lr.coef_)\n",
    "print(lr.intercept_)"
   ]
  },
  {
   "cell_type": "code",
<<<<<<< HEAD
   "execution_count": 11,
   "metadata": {
    "collapsed": false
   },
=======
   "execution_count": 4,
   "metadata": {},
>>>>>>> 6923c13576695537d8da33ed63b8113591fa25ef
   "outputs": [],
   "source": [
    "y_pred=lr.predict(X.reshape(X.shape[0],1))"
   ]
  },
  {
   "cell_type": "code",
<<<<<<< HEAD
   "execution_count": 13,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x110428e10>"
=======
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x1136f0400>"
>>>>>>> 6923c13576695537d8da33ed63b8113591fa25ef
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.scatter(X,y,color='red')\n",
    "plt.plot(X,y_pred,'g--')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
<<<<<<< HEAD
   "execution_count": 16,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "ename": "ValueError",
     "evalue": "shapes (1,1) and (30,1) not aligned: 1 (dim 1) != 30 (dim 0)",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mValueError\u001b[0m                                Traceback (most recent call last)",
      "\u001b[0;32m<ipython-input-16-7720aa284f9c>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      1\u001b[0m \u001b[0mX\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mX\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mreshape\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mX\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mshape\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m0\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 2\u001b[0;31m \u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mdot\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mlinalg\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0minv\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mdot\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mX\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mT\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0mX\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0mX\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m",
      "\u001b[0;31mValueError\u001b[0m: shapes (1,1) and (30,1) not aligned: 1 (dim 1) != 30 (dim 0)"
=======
   "execution_count": 20,
   "metadata": {},
   "outputs": [],
   "source": [
    "X1=np.random.randn(100,5)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {},
   "outputs": [],
   "source": [
    "a=np.array([3,4,5,2,1])\n",
    "a=a.reshape(a.shape[0],-1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {},
   "outputs": [],
   "source": [
    "y=np.dot(X1,a)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[[3. 4. 5. 2. 1.]]\n",
      "[2.77555756e-16]\n"
>>>>>>> 6923c13576695537d8da33ed63b8113591fa25ef
     ]
    }
   ],
   "source": [
<<<<<<< HEAD
    "X=X.reshape(X.shape[0],1)\n",
    "np.dot(,X)"
=======
    "lr.fit(X1,y)\n",
    "print(lr.coef_)\n",
    "print(lr.intercept_)"
>>>>>>> 6923c13576695537d8da33ed63b8113591fa25ef
   ]
  },
  {
   "cell_type": "code",
<<<<<<< HEAD
   "execution_count": 18,
   "metadata": {
    "collapsed": false
   },
=======
   "execution_count": 25,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[[3.]\n",
      " [4.]\n",
      " [5.]\n",
      " [2.]\n",
      " [1.]]\n"
     ]
    }
   ],
   "source": [
    "w1=np.dot(np.dot(np.linalg.inv(np.dot(X1.T,X1)),X1.T),y)\n",
    "print(w1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "metadata": {},
>>>>>>> 6923c13576695537d8da33ed63b8113591fa25ef
   "outputs": [
    {
     "data": {
      "text/plain": [
<<<<<<< HEAD
       "array([2.01856958])"
      ]
     },
     "execution_count": 18,
=======
       "array([[0.],\n",
       "       [0.],\n",
       "       [0.],\n",
       "       [0.],\n",
       "       [0.]])"
      ]
     },
     "execution_count": 36,
>>>>>>> 6923c13576695537d8da33ed63b8113591fa25ef
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
<<<<<<< HEAD
    "np.dot(np.dot(np.linalg.inv(np.dot(X.T,X)),X.T),y)"
=======
    "w2=np.zeros((5,1))\n",
    "w2"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Gradient Descent"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[[3. 4. 5. 2. 1.]]\n",
      "[[3. 4. 5. 2. 1.]]\n",
      "[[3. 4. 5. 2. 1.]]\n",
      "[[3. 4. 5. 2. 1.]]\n",
      "[[3. 4. 5. 2. 1.]]\n",
      "[[3. 4. 5. 2. 1.]]\n",
      "[[3. 4. 5. 2. 1.]]\n",
      "[[3. 4. 5. 2. 1.]]\n",
      "[[3. 4. 5. 2. 1.]]\n",
      "[[3. 4. 5. 2. 1.]]\n"
     ]
    }
   ],
   "source": [
    "lrate=.01\n",
    "for i in range(1000):\n",
    "    w2=w2-lrate*np.dot(X1.T,(np.dot(X1,w2)-y))\n",
    "    if (i+1)%100==0:\n",
    "        print(w2.reshape(1,5))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Stochastic Gradient Descent"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 48,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[[3. 4. 5. 2. 1.]]\n",
      "[[3. 4. 5. 2. 1.]]\n",
      "[[3. 4. 5. 2. 1.]]\n",
      "[[3. 4. 5. 2. 1.]]\n",
      "[[3. 4. 5. 2. 1.]]\n",
      "[[3. 4. 5. 2. 1.]]\n",
      "[[3. 4. 5. 2. 1.]]\n",
      "[[3. 4. 5. 2. 1.]]\n",
      "[[3. 4. 5. 2. 1.]]\n",
      "[[3. 4. 5. 2. 1.]]\n"
     ]
    }
   ],
   "source": [
    "w3=np.zeros((5,1))\n",
    "lrate=.01\n",
    "for index in range(1000):\n",
    "    for i in range(X1.shape[0]):\n",
    "        x_i=X1[i,:].reshape(1,-1)\n",
    "        y_i=y[i]\n",
    "        w2=w2-lrate*np.dot(x_i.T,(np.dot(x_i,w2)-y_i))\n",
    "    if (index+1)%100==0:\n",
    "        print(w2.reshape(1,5))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 45,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(1, 5)\n"
     ]
    }
   ],
   "source": [
    "print(x_i_new.shape)"
>>>>>>> 6923c13576695537d8da33ed63b8113591fa25ef
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
<<<<<<< HEAD
   "metadata": {
    "collapsed": true
   },
=======
   "metadata": {},
>>>>>>> 6923c13576695537d8da33ed63b8113591fa25ef
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
<<<<<<< HEAD
   "display_name": "Python 2",
   "language": "python",
   "name": "python2"
=======
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
>>>>>>> 6923c13576695537d8da33ed63b8113591fa25ef
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
<<<<<<< HEAD
    "version": 2
=======
    "version": 3
>>>>>>> 6923c13576695537d8da33ed63b8113591fa25ef
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
<<<<<<< HEAD
   "pygments_lexer": "ipython2",
   "version": "2.7.13"
=======
   "pygments_lexer": "ipython3",
   "version": "3.6.4"
>>>>>>> 6923c13576695537d8da33ed63b8113591fa25ef
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
